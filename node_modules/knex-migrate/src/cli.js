#!/usr/bin/env node
"use strict";require("core-js/modules/es6.function.name");require("regenerator-runtime/runtime");require("core-js/modules/es6.promise");function _asyncToGenerator(fn) {return function () {var self = this,args = arguments;return new Promise(function (resolve, reject) {var gen = fn.apply(self, args);function step(key, arg) {try {var info = gen[key](arg);var value = info.value;} catch (error) {reject(error);return;}if (info.done) {resolve(value);} else {Promise.resolve(value).then(_next, _throw);}}function _next(value) {step("next", value);}function _throw(err) {step("throw", err);}_next();});};}

var minimist = require('minimist');var _require =
require('lodash'),isNil = _require.isNil;
var knexMigrate = require('./');

var cliHelp = `
Usage
  $ knex-migrate <command> [options]

Commands
  generate  Generate migration
  pending   Lists all pending migrations
  list      Lists all executed migrations
  up        Performs all pending migrations
  down      Rollbacks last migration
  rollback  Rollbacks last batch of migrations
  redo      Rollbacks last batch and performs all migrations

Options for "up" and "down":
  --to, -t    Migrate upto (downto) specific version
  --from, -f  Start migration from specific version
  --only, -o  Migrate only specific version
  --step, -s  Limit the number of migrations to apply

Global options:
  --cwd         Specify the working directory
  --knexfile    Specify the knexfile path ($cwd/knexfile.js)
  --migrations  Specify migrations path ($cwd/migrations)
  --env         Specify environment ($KNEX_ENV || $NODE_ENV || 'development')
  --raw         Disable transactions
  --verbose     Be more verbose

As a convenience, you can skip --to flag, and just provide migration name.

Examples
  $ knex-migrate up                    # migrate to the latest version
  $ knex-migrate up 20160905           # migrate to a specific version
  $ knex-migrate up --to 20160905      # the same as above
  $ knex-migrate up --only 201609085   # apply a single migration
  $ knex-migrate up --step             # apply only the next migration
  $ knex-migrate up --step 2           # apply only the next two migrations
  $ knex-migrate down --to 0           # rollback all migrations
  $ knex-migrate down                  # rollback single migration
  $ knex-migrate down --step 2         # rollback the previous two migrations
  $ knex-migrate rollback              # rollback previous "up"
  $ knex-migrate redo --verbose        # rollback and migrate everything
  $ knex-migrate generate create_users # generate migration creating users table
`;

var options = {
  alias: {
    to: 't',
    from: 'f',
    only: 'o',
    step: 's' },

  string: ['to', 'from', 'only', 'step'] };


function help() {
  console.log(cliHelp);
  process.exit(1);
}function

main() {return _main.apply(this, arguments);}function _main() {_main = _asyncToGenerator(regeneratorRuntime.mark(function _callee() {var flags, input, command, result;return regeneratorRuntime.wrap(function _callee$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:
            flags = require('minimist')(process.argv.slice(2), options);
            input = flags._;

            if (input.length < 1 && !flags.list) {
              help();
            }

            command = input[0];

            if (command === 'generate') {
              if (isNil(flags.name) && !isNil(input[1])) {
                flags.name = input[1];
              }
            } else {
              if (isNil(flags.to) && !isNil(input[1])) {
                flags.to = input[1];
              }
            }_context.prev = 5;_context.next = 8;return (


              knexMigrate(
              command,
              flags,
              consoleDebug(process.stdout)));case 8:result = _context.sent;


            if (Array.isArray(result) && typeof result[0] === 'string') {
              console.log(result.join('\n'));
            }
            if (typeof result === 'string') {
              console.log(result);
            }_context.next = 17;break;case 13:_context.prev = 13;_context.t0 = _context["catch"](5);

            console.error(_context.t0.message);
            process.exit(1);case 17:case "end":return _context.stop();}}}, _callee, this, [[5, 13]]);}));return _main.apply(this, arguments);}



function consoleDebug(stdout) {
  return function (_ref) {var action = _ref.action,migration = _ref.migration;
    if (action === 'migrate') {
      stdout.write(`↑ ${migration}\n`);
    } else if (action === 'revert') {
      stdout.write(`↓ ${migration}\n`);
    } else {
      stdout.write(`${migration}\n`);
    }
  };
}

main().then(
function () {},
function (err) {
  if (flags.verbose) {
    console.error(err.stack);
  } else {
    console.error(err.message);
  }
  process.exit(1);
});