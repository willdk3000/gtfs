#!/usr/bin/env node
"use strict";require("core-js/modules/es6.promise");require("core-js/modules/es6.function.name");require("regenerator-runtime/runtime");function _asyncToGenerator(fn) {return function () {var self = this,args = arguments;return new Promise(function (resolve, reject) {var gen = fn.apply(self, args);function step(key, arg) {try {var info = gen[key](arg);var value = info.value;} catch (error) {reject(error);return;}if (info.done) {resolve(value);} else {Promise.resolve(value).then(_next, _throw);}}function _next(value) {step("next", value);}function _throw(err) {step("throw", err);}_next();});};}var _require =

require('path'),resolve = _require.resolve,dirname = _require.dirname,isAbsolute = _require.isAbsolute,relative = _require.relative;var _require2 =
require('fs'),existsSync = _require2.existsSync;
var reqFrom = require('req-from');
var Umzug = require('umzug');
var fs = require('fs');var _require3 =
require('lodash'),maxBy = _require3.maxBy,minBy = _require3.minBy,filter = _require3.filter,omitBy = _require3.omitBy,isNil = _require3.isNil,template = _require3.template;
var prettyjson = require('prettyjson');
var _Promise = require('bluebird');

function normalizeFlags(flags) {
  if (isAbsolute(flags.knexfile || '') && !flags.cwd) {
    flags.cwd = dirname(flags.knexfile);
  }

  if (isAbsolute(flags.migrations || '') && !flags.cwd) {
    flags.cwd = dirname(flags.migrations);
  }

  flags.cwd = flags.cwd || process.cwd();
  flags.knexfile = flags.knexfile || 'knexfile.js';

  flags.knexfile = resolve(flags.cwd, flags.knexfile);

  flags.env =
  flags.env || process.env.KNEX_ENV || process.env.NODE_ENV || 'development';
}

function knexInit(flags) {
  normalizeFlags(flags);

  var knex = reqFrom.silent(flags.cwd, 'knex');

  if (isNil(knex)) {
    console.error(`Knex not found in '${flags.cwd}'`);
    console.error(
    "Please install it as local dependency with 'npm install --save knex'");

    process.exit(1);
  }

  var config;

  if (flags.config) {

    config = flags.config;
  } else {
    try {
      config = require(flags.knexfile);
    } catch (err) {
      if (/Cannot find module/.test(err.message)) {
        console.error(`No knexfile at '${flags.knexfile}'`);
        console.error("Please create one or bootstrap using 'knex init'");
        process.exit(1);
      }

      throw err;
    }
  }

  if (config[flags.env] && config[flags.env]) {
    config = config[flags.env];
  }

  if (typeof config !== 'object') {
    console.error(`Malformed knex config:`);
    console.error(JSON.stringify(config, null, 2));
    process.exit(1);
  }

  flags.migrations =
  flags.migrations ||
  config.migrations && config.migrations.directory ||
  'migrations';
  flags.migrations = resolve(flags.cwd, flags.migrations);

  if (!existsSync(flags.migrations)) {
    console.error(`No migrations directory at '${flags.migrations}'`);
    console.error(
    "Please create your first migration with 'knex migrate:make <name>'");

    process.exit(1);
  }

  if (flags.verbose) {
    var environment = Object.assign({}, flags, { config });
    var oldConnection = null;
    if (environment.config && environment.config.connection) {
      oldConnection = environment.config.connection;
      environment.config.connection = '<REDACTED>';
    }
    console.error(prettyjson.render(environment, { noColor: true }));
    if (oldConnection) {
      environment.config.connection = oldConnection;
    }
  }

  if (config.client === 'sqlite3') {
    config.useNullAsDefault = true;
  }

  config.pool = { max: 1, min: 0, idleTimeoutMillis: 1000 };

  return knex(config);
}

function umzugKnex(flags, connection) {
  return new Umzug({
    storage: resolve(__dirname, 'storage'),
    storageOptions: { connection },
    migrations: {
      params: [connection, _Promise],
      path: flags.migrations,
      pattern: /^\d+[\w-_]+\.js$/,
      wrap: function wrap(fn) {return function (knex, Promise) {
          if (flags.raw) {
            return Promise.resolve(fn(knex, Promise));
          } else {
            return knex.transaction(function (tx) {return Promise.resolve(fn(tx, Promise));});
          }
        };} } });


}function

umzugOptions(_x, _x2, _x3) {return _umzugOptions.apply(this, arguments);}function _umzugOptions() {_umzugOptions = _asyncToGenerator(regeneratorRuntime.mark(function _callee(command, flags, umzug) {var opts;return regeneratorRuntime.wrap(function _callee$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:if (!(
            isNil(flags.to) && isNil(flags.from) && !isNil(flags.only))) {_context.next = 2;break;}return _context.abrupt("return",
            flags.only);case 2:


            if (flags.to === '0') {
              flags.to = 0;
            }

            if (flags.from === '0') {
              flags.from = 0;
            }

            opts = omitBy({ to: flags.to, from: flags.from }, isNil);if (

            isNil(flags.step)) {_context.next = 8;break;}_context.next = 8;return (
              applyStepOption(command, umzug, opts, flags.step));case 8:return _context.abrupt("return",


            opts);case 9:case "end":return _context.stop();}}}, _callee, this);}));return _umzugOptions.apply(this, arguments);}function


applyStepOption(_x4, _x5, _x6, _x7) {return _applyStepOption.apply(this, arguments);}function _applyStepOption() {_applyStepOption = _asyncToGenerator(regeneratorRuntime.mark(function _callee2(command, umzug, opts, steps) {var migrations, limit, _limit;return regeneratorRuntime.wrap(function _callee2$(_context2) {while (1) {switch (_context2.prev = _context2.next) {case 0:

            if (steps === '') {
              steps = 1;
            }if (!(



            command === 'up')) {_context2.next = 7;break;}_context2.next = 4;return (
              umzug.pending());case 4:_context2.t0 = _context2.sent;_context2.next = 10;break;case 7:_context2.next = 9;return (
              umzug.executed().then(function (m) {return m.reverse();}));case 9:_context2.t0 = _context2.sent;case 10:migrations = _context2.t0;



            if (opts.from) {
              limit = migrations.find(function (m) {return m.file.startsWith(opts.to);});
              migrations = migrations.slice(Math.min(0, migrations.indexOf(limit)));
            }



            if (opts.to) {
              _limit = migrations.find(function (m) {return m.file.startsWith(opts.to);});
              migrations = migrations.slice(0, migrations.indexOf(_limit) + 1);
            }


            steps = Math.min(migrations.length, steps);


            if (steps > 0) {
              opts.to = migrations[steps - 1].file;
            }case 15:case "end":return _context2.stop();}}}, _callee2, this);}));return _applyStepOption.apply(this, arguments);}


function _ensureFolder(dir) {
  return _Promise.promisify(fs.stat, { context: fs })(dir).catch(function () {return (
      _Promise.promisify(mkdirp)(dir));});

}

function _generateStubTemplate(flags) {
  var stubPath = flags.stub || resolve(__dirname, 'stub', 'js.stub');
  return _Promise.promisify(fs.readFile, { context: fs })(stubPath).then(function (stub) {return (
      template(stub.toString(), { variable: 'd' }));});

}

function _writeNewMigration(dir, name, tmpl) {
  if (name[0] === '-') name = name.slice(1);
  var filename = yyyymmddhhmmss() + '_' + name + '.js';
  var variables = {};
  if (name.indexOf('create_') === 0) {
    console.log(name);
    variables.tableName = name.slice(7);
  }
  return _Promise.promisify(fs.writeFile, { context: fs })(
  resolve(dir, filename),
  tmpl(variables)).
  return(resolve(dir, filename));
}

function padDate(segment) {
  segment = segment.toString();
  return segment[1] ? segment : `0${segment}`;
}

function yyyymmddhhmmss() {
  var d = new Date();
  return (
    d.getFullYear().toString() +
    padDate(d.getMonth() + 1) +
    padDate(d.getDate()) +
    padDate(d.getHours()) +
    padDate(d.getMinutes()) +
    padDate(d.getSeconds()));

}function

knexMigrate(_x8, _x9, _x10) {return _knexMigrate.apply(this, arguments);}function _knexMigrate() {_knexMigrate = _asyncToGenerator(regeneratorRuntime.mark(function _callee10(command, flags, progress) {var umzug, debug, api;return regeneratorRuntime.wrap(function _callee10$(_context10) {while (1) {switch (_context10.prev = _context10.next) {case 0:
            flags = flags || {};
            progress = progress || function () {};

            umzug = umzugKnex(flags, knexInit(flags));

            debug = function debug(action) {return function (migration) {
                progress({
                  action,
                  migration: relative(
                  flags.cwd,
                  resolve(flags.migrations, migration + '.js')) });


              };};

            umzug.
            on('migrating', debug('migrate')).
            on('reverting', debug('revert')).
            on('debug', debug('debug'));

            api = {
              generate: function () {var _generate = _asyncToGenerator(regeneratorRuntime.mark(function _callee3() {var migrationsPath, val, template, name;return regeneratorRuntime.wrap(function _callee3$(_context3) {while (1) {switch (_context3.prev = _context3.next) {case 0:if (
                          flags.name) {_context3.next = 2;break;}throw (
                            new Error('A name must be specified for the generated migration'));case 2:


                          migrationsPath = umzug.options.migrations.path;_context3.next = 5;return (

                            _ensureFolder(migrationsPath));case 5:val = _context3.sent;_context3.next = 8;return (
                            _generateStubTemplate(flags));case 8:template = _context3.sent;_context3.next = 11;return (
                            _writeNewMigration(
                            migrationsPath,
                            flags.name,
                            template));case 11:name = _context3.sent;return _context3.abrupt("return",


                          relative(flags.cwd, name));case 13:case "end":return _context3.stop();}}}, _callee3, this);}));return function generate() {return _generate.apply(this, arguments);};}(),

              list: function () {var _list = _asyncToGenerator(regeneratorRuntime.mark(function _callee4() {var migrations;return regeneratorRuntime.wrap(function _callee4$(_context4) {while (1) {switch (_context4.prev = _context4.next) {case 0:_context4.next = 2;return (
                            umzug.executed());case 2:migrations = _context4.sent;return _context4.abrupt("return",
                          migrations.map(function (m) {return (
                              relative(flags.cwd, resolve(flags.migrations, m.file)));}));case 4:case "end":return _context4.stop();}}}, _callee4, this);}));return function list() {return _list.apply(this, arguments);};}(),


              pending: function () {var _pending = _asyncToGenerator(regeneratorRuntime.mark(function _callee5() {var migrations;return regeneratorRuntime.wrap(function _callee5$(_context5) {while (1) {switch (_context5.prev = _context5.next) {case 0:_context5.next = 2;return (
                            umzug.pending());case 2:migrations = _context5.sent;return _context5.abrupt("return",
                          migrations.map(function (m) {return (
                              relative(flags.cwd, resolve(flags.migrations, m.file)));}));case 4:case "end":return _context5.stop();}}}, _callee5, this);}));return function pending() {return _pending.apply(this, arguments);};}(),


              rollback: function () {var _rollback = _asyncToGenerator(regeneratorRuntime.mark(function _callee6() {var migrations, maxBatch, lastBatch, firstFromBatch;return regeneratorRuntime.wrap(function _callee6$(_context6) {while (1) {switch (_context6.prev = _context6.next) {case 0:_context6.next = 2;return (
                            umzug.storage.migrations());case 2:migrations = _context6.sent;if (!(

                          migrations.length === 0)) {_context6.next = 5;break;}return _context6.abrupt("return");case 5:



                          maxBatch = maxBy(migrations, 'batch').batch;
                          lastBatch = filter(migrations, { batch: maxBatch });
                          firstFromBatch = minBy(lastBatch, 'migration_time');return _context6.abrupt("return",

                          umzug.down({ to: firstFromBatch.name }));case 9:case "end":return _context6.stop();}}}, _callee6, this);}));return function rollback() {return _rollback.apply(this, arguments);};}(),

              redo: function () {var _redo = _asyncToGenerator(regeneratorRuntime.mark(function _callee7() {var history, args;return regeneratorRuntime.wrap(function _callee7$(_context7) {while (1) {switch (_context7.prev = _context7.next) {case 0:_context7.next = 2;return (
                            umzug.executed());case 2:history = _context7.sent;
                          args = {};
                          if (history.length > 0) {
                            args.to = history[history.length - 1].file;
                          }_context7.next = 7;return (
                            knexMigrate('rollback', {}, progress));case 7:_context7.next = 9;return (
                            knexMigrate('up', args, progress));case 9:case "end":return _context7.stop();}}}, _callee7, this);}));return function redo() {return _redo.apply(this, arguments);};}(),

              up: function () {var _up = _asyncToGenerator(regeneratorRuntime.mark(function _callee8() {var opts;return regeneratorRuntime.wrap(function _callee8$(_context8) {while (1) {switch (_context8.prev = _context8.next) {case 0:_context8.next = 2;return (
                            umzugOptions('up', flags, umzug));case 2:opts = _context8.sent;_context8.next = 5;return (
                            umzug.storage.ensureTable());case 5:return _context8.abrupt("return",
                          umzug.up(opts));case 6:case "end":return _context8.stop();}}}, _callee8, this);}));return function up() {return _up.apply(this, arguments);};}(),

              down: function () {var _down = _asyncToGenerator(regeneratorRuntime.mark(function _callee9() {var opts;return regeneratorRuntime.wrap(function _callee9$(_context9) {while (1) {switch (_context9.prev = _context9.next) {case 0:_context9.next = 2;return (
                            umzugOptions('down', flags, umzug));case 2:opts = _context9.sent;_context9.next = 5;return (
                            umzug.storage.ensureTable());case 5:return _context9.abrupt("return",
                          umzug.down(opts));case 6:case "end":return _context9.stop();}}}, _callee9, this);}));return function down() {return _down.apply(this, arguments);};}() };if (



            command in api) {_context10.next = 8;break;}throw (
              new Error('Unknown command: ' + command));case 8:_context10.prev = 8;_context10.next = 11;return (



              api[command].apply(null, flags));case 11:return _context10.abrupt("return", _context10.sent);case 12:_context10.prev = 12;

            umzug.storage.knex.destroy();return _context10.finish(12);case 15:case "end":return _context10.stop();}}}, _callee10, this, [[8,, 12, 15]]);}));return _knexMigrate.apply(this, arguments);}



module.exports = knexMigrate;
module.exports.default = knexMigrate;